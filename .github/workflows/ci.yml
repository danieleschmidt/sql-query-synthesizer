name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
    - name: Security scan with bandit
      run: bandit -r sql_synthesizer/

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    - name: Run tests
      run: |
        pytest tests/ -v --cov=sql_synthesizer --cov-report=xml
      env:
        OPENAI_API_KEY: test-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  docker:
    name: Container Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker image
      run: docker build -t sql-synthesizer:test .
    - name: Test container
      run: docker run --rm sql-synthesizer:test python -c "import sql_synthesizer"