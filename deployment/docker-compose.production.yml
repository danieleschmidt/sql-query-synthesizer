version: '3.8'

services:
  # SQL Query Synthesizer - Primary Application
  sql-synthesizer:
    build:
      context: ..
      dockerfile: Dockerfile.production
    image: sql-synthesizer:production
    container_name: sql-synthesizer-app
    restart: unless-stopped
    
    environment:
      # Application Configuration
      - QUERY_AGENT_ENV=production
      - QUERY_AGENT_CONFIG=/app/config/production.yaml
      - FLASK_ENV=production
      - PYTHONPATH=/app
      
      # Database Configuration
      - DATABASE_URL=postgresql://sql_user:${DB_PASSWORD}@postgres:5432/sql_synthesizer
      - QUERY_AGENT_DB_POOL_SIZE=20
      - QUERY_AGENT_DB_MAX_OVERFLOW=40
      - QUERY_AGENT_DB_POOL_RECYCLE=3600
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - QUERY_AGENT_OPENAI_MODEL=gpt-4
      - QUERY_AGENT_OPENAI_TIMEOUT=30
      
      # Caching Configuration (Redis)
      - QUERY_AGENT_CACHE_BACKEND=redis
      - QUERY_AGENT_REDIS_HOST=redis
      - QUERY_AGENT_REDIS_PORT=6379
      - QUERY_AGENT_REDIS_DB=0
      - QUERY_AGENT_REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUERY_AGENT_CACHE_TTL=3600
      
      # Security Configuration
      - QUERY_AGENT_SECRET_KEY=${SECRET_KEY}
      - QUERY_AGENT_CSRF_ENABLED=true
      - QUERY_AGENT_RATE_LIMIT_PER_MINUTE=100
      - QUERY_AGENT_ENABLE_HSTS=true
      - QUERY_AGENT_API_KEY_REQUIRED=true
      - QUERY_AGENT_API_KEY=${API_KEY}
      
      # Performance Configuration
      - QUERY_AGENT_MAX_REQUEST_SIZE_MB=10
      - QUERY_AGENT_DEFAULT_PAGE_SIZE=25
      - QUERY_AGENT_MAX_PAGE_SIZE=1000
      - QUERY_AGENT_DATABASE_TIMEOUT=30
      
      # Circuit Breaker Configuration
      - QUERY_AGENT_CIRCUIT_BREAKER_FAILURE_THRESHOLD=10
      - QUERY_AGENT_CIRCUIT_BREAKER_RECOVERY_TIMEOUT=300
      
      # Auto-scaling Configuration
      - QUERY_AGENT_AUTO_SCALING_ENABLED=true
      - QUERY_AGENT_METRICS_COLLECTION_INTERVAL=30
      - QUERY_AGENT_SCALING_EVALUATION_INTERVAL=60
      
      # Global Configuration
      - TZ=UTC
      - LANG=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      
    ports:
      - "5000:5000"
      
    volumes:
      - ../config:/app/config:ro
      - sql_logs:/app/logs
      - sql_data:/app/data
      
    networks:
      - sql-synthesizer-network
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sql-synthesizer-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=sql_synthesizer
      - POSTGRES_USER=sql_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
      
    ports:
      - "5432:5432"
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init:/docker-entrypoint-initdb.d:ro
      
    networks:
      - sql-synthesizer-network
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sql_user -d sql_synthesizer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sql-synthesizer-redis
    restart: unless-stopped
    
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      
    ports:
      - "6379:6379"
      
    volumes:
      - redis_data:/data
      
    networks:
      - sql-synthesizer-network
      
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sql-synthesizer-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
      
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d:/etc/nginx/conf.d:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      
    networks:
      - sql-synthesizer-network
      
    depends_on:
      - sql-synthesizer
      
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sql-synthesizer-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      
    ports:
      - "9090:9090"
      
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      
    networks:
      - sql-synthesizer-network
      
    depends_on:
      - sql-synthesizer
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sql-synthesizer-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      
    ports:
      - "3000:3000"
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      
    networks:
      - sql-synthesizer-network
      
    depends_on:
      - prometheus
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sql-synthesizer-elasticsearch
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      
    ports:
      - "9200:9200"
      
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      
    networks:
      - sql-synthesizer-network
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Filebeat Log Shipper
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: sql-synthesizer-filebeat
    restart: unless-stopped
    
    user: root
    
    volumes:
      - ../monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - sql_logs:/var/log/sql-synthesizer:ro
      
    networks:
      - sql-synthesizer-network
      
    depends_on:
      - elasticsearch
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

networks:
  sql-synthesizer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  sql_logs:
    driver: local
  sql_data:
    driver: local
  nginx_logs:
    driver: local