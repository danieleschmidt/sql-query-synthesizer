# Default values for progressive-quality-gates
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application image configuration
image:
  registry: docker.io
  repository: terragon/progressive-quality-gates
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

# Service account configuration
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001
  readOnlyRootFilesystem: false

# Pod security context
podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

# Deployment configuration
replicaCount: 3

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Resource configuration
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 256Mi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  metricsPort: 9090

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: quality-gates.terragon.ai
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: quality-gates-tls
      hosts:
        - quality-gates.terragon.ai

# Health check configuration
healthcheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Environment variables
env:
  PYTHONPATH: "/app"
  QUALITY_GATE_EXECUTION_MODE: "autonomous"
  QUANTUM_OPTIMIZATION_ENABLED: "true"
  RESILIENT_ERROR_HANDLING: "true"
  PREDICTIVE_SCALING_ENABLED: "true"
  LOG_LEVEL: "INFO"

# Secrets configuration
secrets:
  create: true
  name: progressive-quality-gates-secrets
  data:
    openai-api-key: ""  # Base64 encoded
    github-token: ""    # Base64 encoded
    slack-webhook: ""   # Base64 encoded

# Configuration
config:
  quality_gates:
    execution_mode: "progressive"
    quality_levels:
      - basic
      - intermediate
      - advanced
      - expert
    
    thresholds:
      minimum_score: 0.75
      confidence_threshold: 0.8
      technical_debt_limit: 0.3
      
    optimization:
      quantum_enabled: true
      evolutionary_enabled: true
      swarm_intelligence_enabled: true
      predictive_scaling: true
      
    resilience:
      circuit_breaker_enabled: true
      recovery_strategies:
        - retry
        - fallback
        - graceful_degrade
        - circuit_break
      max_retries: 3
      timeout_seconds: 30
      
    monitoring:
      metrics_enabled: true
      audit_logging: true
      performance_tracking: true
      trend_analysis: true

# Logging configuration
logging:
  level: INFO
  format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
  handlers:
    console:
      enabled: true
      level: INFO
    file:
      enabled: true
      level: DEBUG
      maxBytes: 10485760  # 10MB
      backupCount: 5

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    labels: {}
  
  prometheusRule:
    enabled: true
    labels: {}
    rules:
      - alert: QualityGateHighErrorRate
        expr: rate(quality_gate_errors_total[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High error rate in quality gates"
          description: "Quality gate error rate is {{ $value }} errors per second"
      
      - alert: QualityGateDowntimeAlert
        expr: up{job="progressive-quality-gates"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Progressive Quality Gates is down"
          description: "Progressive Quality Gates has been down for more than 1 minute"

# Storage configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi

# Node selector and tolerations
nodeSelector:
  workload-type: compute-intensive

tolerations:
  - key: "compute-intensive"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Pod affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - progressive-quality-gates
          topologyKey: kubernetes.io/hostname

# Network policy
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
    - from: []
      ports:
        - protocol: TCP
          port: 8080

# Extra labels and annotations
extraLabels: {}
extraAnnotations: {}

# Pod annotations for monitoring
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

# Volume mounts
volumes:
  - name: config-volume
    configMap:
      name: progressive-quality-gates-config
  - name: log-volume
    emptyDir:
      sizeLimit: 1Gi
  - name: tmp-volume
    emptyDir:
      sizeLimit: 500Mi
  - name: cache-volume
    emptyDir:
      sizeLimit: 2Gi

volumeMounts:
  - name: config-volume
    mountPath: /etc/config
    readOnly: true
  - name: log-volume
    mountPath: /var/log/quality-gates
  - name: tmp-volume
    mountPath: /tmp
  - name: cache-volume
    mountPath: /app/cache

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Extra environment variables from configmaps or secrets
extraEnvVarsConfigMap: ""
extraEnvVarsSecret: ""

# Custom command and args
command: []
args: []