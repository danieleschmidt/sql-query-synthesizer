
version: '3.8'

services:
  sql-synthesizer:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "5000:5000"
    environment:
      - QUERY_AGENT_WEBAPP_PORT=5000
      - QUERY_AGENT_CACHE_BACKEND=redis
      - QUERY_AGENT_REDIS_HOST=redis
      - QUERY_AGENT_SECRET_KEY=${SECRET_KEY}
      - QUERY_AGENT_API_KEY_REQUIRED=true
      - QUERY_AGENT_API_KEY=${API_KEY}
    depends_on:
      - redis
      - postgres
    volumes:
      - app_logs:/app/logs
    networks:
      - sql_synthesizer_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sql_synthesizer_network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sql_synthesizer
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sql_synthesizer_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - sql-synthesizer
    networks:
      - sql_synthesizer_network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  app_logs:

networks:
  sql_synthesizer_network:
    driver: bridge
