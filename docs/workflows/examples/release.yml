name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo "Tag: ${TAG}"

      - name: Validate version format
        run: |
          if ! echo "${{ steps.version.outputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.tag }} already exists"
            exit 1
          fi

  quality-gate:
    name: Pre-Release Quality Gate
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make ci-install

      - name: Run comprehensive tests
        run: |
          make test
          make lint
          make security

      - name: Verify test coverage
        run: |
          make test-coverage
          coverage_percent=$(coverage report --format=total)
          if [ "$coverage_percent" -lt 80 ]; then
            echo "Test coverage ($coverage_percent%) below required threshold (80%)"
            exit 1
          fi

  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [validate-release, quality-gate]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/version = ".*"/version = "${{ needs.validate-release.outputs.version }}"/' pyproject.toml

      - name: Build package
        run: |
          python -m build

      - name: Validate package
        run: |
          twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-${{ needs.validate-release.outputs.version }}
          path: dist/

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [validate-release, quality-gate]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: container-sbom-${{ needs.validate-release.outputs.version }}
          path: sbom.spdx.json

  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-container]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, quality-gate, build-package, security-scan]
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, quality-gate, build-package, build-container, publish-pypi]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          last_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            echo "## Changes since $last_tag" > changelog.md
            git log --pretty=format:"- %s (%h)" ${last_tag}..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "First release of SQL Query Synthesizer" >> changelog.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          release_name: Release ${{ needs.validate-release.outputs.version }}
          body: |
            # SQL Query Synthesizer ${{ needs.validate-release.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            pip install sql-synthesizer==${{ needs.validate-release.outputs.version }}
            ```
            
            ## Container Image
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
            ```
            
            ## Security
            
            This release has been automatically scanned for vulnerabilities. See the Security tab for details.
            
            ## Artifacts
            
            - Python package available on [PyPI](https://pypi.org/project/sql-synthesizer/${{ needs.validate-release.outputs.version }}/)
            - Container image available on [GitHub Container Registry](${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})
            - SBOM files attached to this release
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: python-package-${{ needs.validate-release.outputs.version }}/
          asset_name: python-package-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always()
    steps:
      - name: Notify team of successful release
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üöÄ SQL Query Synthesizer ${{ needs.validate-release.outputs.version }} has been released!
            
            üì¶ PyPI: https://pypi.org/project/sql-synthesizer/${{ needs.validate-release.outputs.version }}/
            üê≥ Container: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
            üìã Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}
          webhook_url: ${{ secrets.RELEASE_SLACK_WEBHOOK }}

      - name: Notify team of failed release
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Release ${{ needs.validate-release.outputs.version }} failed!
            
            Please check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.RELEASE_SLACK_WEBHOOK }}