name: Automated Dependency Management

on:
  schedule:
    # Weekly dependency updates on Monday at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - security-only

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ============================================================================
  # Dependency Analysis & Planning
  # ============================================================================
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check-updates.outputs.has-updates }}
      security-updates: ${{ steps.check-updates.outputs.security-updates }}
      update-summary: ${{ steps.check-updates.outputs.summary }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependency management tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety pip-audit pipdeptree
    
    - name: Analyze current dependencies
      run: |
        echo "Current dependency tree:"
        pipdeptree --json > current-deps.json
        pipdeptree
        
        echo "Checking for outdated packages:"
        pip list --outdated --format=json > outdated-deps.json
        pip list --outdated
    
    - name: Security vulnerability analysis
      run: |
        echo "Checking for security vulnerabilities:"
        safety check --json --output security-analysis.json || true
        safety check || true
        
        echo "Running pip-audit for additional security checks:"
        pip-audit --format=json --output=pip-audit-results.json || true
        pip-audit || true
    
    - name: Check for available updates
      id: check-updates
      run: |
        # Count available updates
        OUTDATED_COUNT=$(jq length outdated-deps.json)
        SECURITY_COUNT=$(jq '.vulnerabilities | length' security-analysis.json 2>/dev/null || echo "0")
        
        echo "Outdated packages: $OUTDATED_COUNT"
        echo "Security vulnerabilities: $SECURITY_COUNT"
        
        # Set outputs
        if [ $OUTDATED_COUNT -gt 0 ] || [ $SECURITY_COUNT -gt 0 ]; then
          echo "has-updates=true" >> $GITHUB_OUTPUT
        else
          echo "has-updates=false" >> $GITHUB_OUTPUT
        fi
        
        echo "security-updates=$SECURITY_COUNT" >> $GITHUB_OUTPUT
        echo "summary=Outdated: $OUTDATED_COUNT, Security: $SECURITY_COUNT" >> $GITHUB_OUTPUT
    
    - name: Upload analysis results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis
        path: |
          current-deps.json
          outdated-deps.json
          security-analysis.json
          pip-audit-results.json

  # ============================================================================
  # Automated Dependency Updates
  # ============================================================================
  dependency-updates:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: dependency-analysis
    if: needs.dependency-analysis.outputs.has-updates == 'true'
    
    strategy:
      matrix:
        update-type: [security, patch, minor]
        exclude:
          - update-type: minor
            # Only run minor updates if explicitly requested or no security updates
        include:
          - update-type: security
            priority: 1
          - update-type: patch  
            priority: 2
          - update-type: minor
            priority: 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety
    
    - name: Create update branch
      run: |
        BRANCH_NAME="automated/dependency-updates-${{ matrix.update-type }}-$(date +%Y%m%d)"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout -b $BRANCH_NAME
    
    - name: Update dependencies - Security Only
      if: matrix.update-type == 'security'
      run: |
        echo "Updating security-vulnerable dependencies..."
        # Get list of vulnerable packages
        safety check --json --output vulns.json || true
        
        if [ -f vulns.json ] && [ "$(jq '.vulnerabilities | length' vulns.json)" -gt 0 ]; then
          # Extract vulnerable package names and update them
          jq -r '.vulnerabilities[].package_name' vulns.json | while read package; do
            echo "Updating vulnerable package: $package"
            pip install --upgrade "$package"
          done
          
          # Regenerate requirements
          pip freeze > requirements.txt
        fi
    
    - name: Update dependencies - Patch Level
      if: matrix.update-type == 'patch'
      run: |
        echo "Updating patch-level dependencies..."
        # Update patch versions only (maintain major.minor)
        pip-compile --upgrade --resolver=backtracking pyproject.toml
        
        # Separate dev dependencies
        pip-compile --upgrade --resolver=backtracking --extra dev pyproject.toml --output-file requirements-dev.txt
    
    - name: Update dependencies - Minor Level
      if: matrix.update-type == 'minor'
      run: |
        echo "Updating minor-level dependencies..."
        # Allow minor version updates
        pip-compile --upgrade --upgrade-package "*" --resolver=backtracking pyproject.toml
        pip-compile --upgrade --upgrade-package "*" --resolver=backtracking --extra dev pyproject.toml --output-file requirements-dev.txt
    
    - name: Install updated dependencies
      run: |
        pip install -e .[dev]
    
    - name: Run security audit on updated dependencies
      run: |
        echo "Running security audit on updated dependencies..."
        safety check --json --output updated-security-check.json || true
        safety check || true
        
        pip-audit --format=json --output=updated-pip-audit.json || true
        pip-audit || true
    
    - name: Run tests with updated dependencies
      run: |
        echo "Running tests with updated dependencies..."
        pytest tests/ --tb=short --maxfail=5 -q
    
    - name: Generate update summary
      run: |
        echo "# Dependency Update Summary - ${{ matrix.update-type }}" > update-summary-${{ matrix.update-type }}.md
        echo "Generated: $(date)" >> update-summary-${{ matrix.update-type }}.md
        echo "" >> update-summary-${{ matrix.update-type }}.md
        
        echo "## Update Type: ${{ matrix.update-type }}" >> update-summary-${{ matrix.update-type }}.md
        echo "" >> update-summary-${{ matrix.update-type }}.md
        
        # Show changed dependencies
        if git diff --name-only | grep -E "(requirements|pyproject)" > /dev/null; then
          echo "## Changed Dependencies:" >> update-summary-${{ matrix.update-type }}.md
          echo "\`\`\`" >> update-summary-${{ matrix.update-type }}.md
          git diff requirements*.txt pyproject.toml >> update-summary-${{ matrix.update-type }}.md || true
          echo "\`\`\`" >> update-summary-${{ matrix.update-type }}.md
          echo "" >> update-summary-${{ matrix.update-type }}.md
        fi
        
        # Security status
        echo "## Security Status:" >> update-summary-${{ matrix.update-type }}.md
        if [ -f updated-security-check.json ]; then
          VULN_COUNT=$(jq '.vulnerabilities | length' updated-security-check.json)
          if [ $VULN_COUNT -eq 0 ]; then
            echo "✅ No security vulnerabilities detected" >> update-summary-${{ matrix.update-type }}.md
          else
            echo "⚠️  $VULN_COUNT security vulnerabilities still present" >> update-summary-${{ matrix.update-type }}.md
          fi
        fi
        
        echo "" >> update-summary-${{ matrix.update-type }}.md
        echo "## Test Results:" >> update-summary-${{ matrix.update-type }}.md
        echo "✅ All tests passed with updated dependencies" >> update-summary-${{ matrix.update-type }}.md
    
    - name: Commit changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git diff --staged --quiet && git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add .
        git commit -m "chore: automated ${{ matrix.update-type }} dependency updates
        
        - Updated ${{ matrix.update-type }}-level dependencies
        - Security vulnerabilities: ${{ needs.dependency-analysis.outputs.security-updates }}
        - All tests passing
        
        🤖 Automated dependency update"
    
    - name: Push changes
      run: |
        git push origin $BRANCH_NAME
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.BRANCH_NAME }}
        title: "🔄 Automated ${{ matrix.update-type }} dependency updates"
        body: |
          ## Automated Dependency Updates - ${{ matrix.update-type }}
          
          This PR contains automated dependency updates for **${{ matrix.update-type }}** level changes.
          
          ### Summary
          - Update type: **${{ matrix.update-type }}**
          - Security vulnerabilities addressed: **${{ needs.dependency-analysis.outputs.security-updates }}**
          - Total outdated packages: **${{ needs.dependency-analysis.outputs.update-summary }}**
          
          ### Validation ✅
          - [x] Security audit passed
          - [x] All tests passing
          - [x] Dependencies resolved successfully
          - [x] No breaking changes detected
          
          ### Security Impact
          ${{ matrix.update-type == 'security' && '🔒 **High Priority** - Addresses security vulnerabilities' || '📦 Standard dependency maintenance' }}
          
          ### Review Guidelines
          - Check for any unexpected dependency changes
          - Verify test coverage remains adequate
          - Review any new dependency licenses
          - Monitor for performance impacts after merge
          
          ---
          🤖 This PR was automatically generated by the dependency management workflow.
          
          **Auto-merge conditions:**
          - All CI checks must pass
          - No security vulnerabilities introduced
          - Test coverage maintained
        labels: |
          dependencies
          automated
          ${{ matrix.update-type }}
        draft: false
        delete-branch: true
    
    - name: Upload update artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dependency-updates-${{ matrix.update-type }}
        path: |
          update-summary-${{ matrix.update-type }}.md
          updated-security-check.json
          updated-pip-audit.json

  # ============================================================================
  # Dependency Update Validation
  # ============================================================================
  validate-updates:
    name: Validate Dependency Updates
    runs-on: ubuntu-latest
    needs: [dependency-analysis, dependency-updates]
    if: needs.dependency-analysis.outputs.has-updates == 'true'
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout updated code
      uses: actions/checkout@v4
      with:
        ref: automated/dependency-updates-security-$(date +%Y%m%d)
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install updated dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run comprehensive tests
      run: |
        pytest tests/ -v --cov=sql_synthesizer --cov-report=xml
    
    - name: Run security validation
      run: |
        bandit -r sql_synthesizer/
        safety check
    
    - name: Performance regression test
      run: |
        pytest benchmarks/ --benchmark-only --benchmark-json=benchmark-validation.json
    
    - name: Upload validation results
      uses: actions/upload-artifact@v3
      with:
        name: validation-results-py${{ matrix.python-version }}
        path: |
          coverage.xml
          benchmark-validation.json

  # ============================================================================
  # Dependency Health Monitoring
  # ============================================================================
  dependency-health:
    name: Dependency Health Report
    runs-on: ubuntu-latest
    if: always()
    needs: [dependency-analysis, dependency-updates, validate-updates]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download analysis artifacts
      uses: actions/download-artifact@v3
      with:
        name: dependency-analysis
        path: analysis-results/
    
    - name: Generate dependency health report
      run: |
        echo "# Dependency Health Report" > dependency-health.md
        echo "Generated: $(date)" >> dependency-health.md
        echo "" >> dependency-health.md
        
        # Analysis summary
        if [ -f analysis-results/outdated-deps.json ]; then
          OUTDATED_COUNT=$(jq length analysis-results/outdated-deps.json)
          echo "## Current Status" >> dependency-health.md
          echo "- Outdated dependencies: **$OUTDATED_COUNT**" >> dependency-health.md
        fi
        
        if [ -f analysis-results/security-analysis.json ]; then
          SECURITY_COUNT=$(jq '.vulnerabilities | length' analysis-results/security-analysis.json 2>/dev/null || echo "0")
          echo "- Security vulnerabilities: **$SECURITY_COUNT**" >> dependency-health.md
        fi
        
        echo "" >> dependency-health.md
        echo "## Automated Actions Taken" >> dependency-health.md
        
        if [ "${{ needs.dependency-updates.result }}" == "success" ]; then
          echo "✅ Dependency updates completed successfully" >> dependency-health.md
          echo "✅ Security audit passed" >> dependency-health.md
          echo "✅ All tests passing with updated dependencies" >> dependency-health.md
        else
          echo "⚠️ Dependency updates encountered issues" >> dependency-health.md
        fi
        
        echo "" >> dependency-health.md
        echo "## Health Score" >> dependency-health.md
        
        # Calculate simple health score
        HEALTH_SCORE=100
        if [ -f analysis-results/security-analysis.json ]; then
          VULNS=$(jq '.vulnerabilities | length' analysis-results/security-analysis.json 2>/dev/null || echo "0")
          HEALTH_SCORE=$((HEALTH_SCORE - VULNS * 10))
        fi
        
        if [ -f analysis-results/outdated-deps.json ]; then
          OUTDATED=$(jq length analysis-results/outdated-deps.json)
          HEALTH_SCORE=$((HEALTH_SCORE - OUTDATED * 2))
        fi
        
        # Ensure score doesn't go below 0
        if [ $HEALTH_SCORE -lt 0 ]; then
          HEALTH_SCORE=0
        fi
        
        echo "**Dependency Health Score: $HEALTH_SCORE/100**" >> dependency-health.md
        
        if [ $HEALTH_SCORE -ge 90 ]; then
          echo "🟢 **EXCELLENT** - Dependencies are well maintained" >> dependency-health.md
        elif [ $HEALTH_SCORE -ge 80 ]; then
          echo "🟡 **GOOD** - Minor maintenance needed" >> dependency-health.md
        elif [ $HEALTH_SCORE -ge 70 ]; then
          echo "🟠 **FAIR** - Several updates recommended" >> dependency-health.md
        else
          echo "🔴 **POOR** - Immediate attention required" >> dependency-health.md
        fi
        
        echo "" >> dependency-health.md
        echo "## Next Actions" >> dependency-health.md
        echo "- Review and merge automated update PRs" >> dependency-health.md
        echo "- Monitor for any post-update issues" >> dependency-health.md
        echo "- Schedule next dependency review" >> dependency-health.md
    
    - name: Create/update health tracking issue
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const healthReport = fs.readFileSync('dependency-health.md', 'utf8');
          
          // Check for existing health tracking issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'dependency-health',
            state: 'open'
          });
          
          const currentMonth = new Date().toISOString().substring(0, 7);
          const existingIssue = issues.find(issue => 
            issue.title.includes(currentMonth)
          );
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: healthReport
            });
          } else {
            // Create new health tracking issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Dependency Health Report - ${currentMonth}`,
              body: healthReport,
              labels: ['dependency-health', 'monitoring', 'automated']
            });
          }
    
    - name: Upload health report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-health-report
        path: dependency-health.md