name: Continuous Security Monitoring

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'sql_synthesizer/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'Dockerfile'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ============================================================================
  # Automated Security Scanning & Monitoring
  # ============================================================================
  security-monitoring:
    name: Security Monitoring & Alerts
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install semgrep bandit safety detect-secrets
    
    - name: Enhanced security scan with Bandit
      run: |
        echo "Running enhanced Bandit security scan..."
        bandit -r sql_synthesizer/ -f json -o bandit-detailed.json -ll
        bandit -r sql_synthesizer/ -ll
      continue-on-error: true
    
    - name: Advanced dependency vulnerability scan
      run: |
        echo "Running comprehensive dependency scan..."
        safety check --json --output safety-detailed.json --full-report
        safety check --full-report
      continue-on-error: true
    
    - name: Secret detection with enhanced patterns
      run: |
        echo "Running secret detection with custom patterns..."
        detect-secrets scan --all-files --baseline .secrets.baseline --force-use-all-plugins
      continue-on-error: true
    
    - name: Semgrep SAST analysis
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      run: |
        echo "Running Semgrep SAST analysis..."
        semgrep \
          --config=p/security-audit \
          --config=p/secrets \
          --config=p/python \
          --config=p/flask \
          --config=p/sql-injection \
          --config=p/owasp-top-ten \
          --json --output semgrep-results.json \
          sql_synthesizer/
      continue-on-error: true
    
    - name: Container security scan
      if: github.event_name != 'schedule'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:latest
        format: 'sarif'
        output: 'container-security.sarif'
      continue-on-error: true
    
    - name: CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-and-quality,security-extended
    
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"
    
    - name: Upload security reports to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: container-security.sarif
      continue-on-error: true
    
    - name: Generate security summary
      run: |
        echo "# Security Monitoring Report" > security-summary.md
        echo "Generated: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results:" >> security-summary.md
        
        # Bandit results
        if [ -f bandit-detailed.json ]; then
          HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-detailed.json)
          MEDIUM_ISSUES=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-detailed.json)
          echo "- **Bandit SAST**: $HIGH_ISSUES high, $MEDIUM_ISSUES medium severity issues" >> security-summary.md
        fi
        
        # Safety results
        if [ -f safety-detailed.json ]; then
          VULNS=$(jq '.vulnerabilities | length' safety-detailed.json 2>/dev/null || echo "0")
          echo "- **Safety Dependencies**: $VULNS vulnerabilities found" >> security-summary.md
        fi
        
        # Semgrep results
        if [ -f semgrep-results.json ]; then
          SEMGREP_ISSUES=$(jq '.results | length' semgrep-results.json)
          echo "- **Semgrep SAST**: $SEMGREP_ISSUES security issues found" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommended Actions:" >> security-summary.md
        echo "- Review and address high-severity findings" >> security-summary.md
        echo "- Update vulnerable dependencies" >> security-summary.md
        echo "- Implement additional security controls if needed" >> security-summary.md
    
    - name: Create security issue for critical findings
      if: github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Check for critical security issues
          let criticalIssues = false;
          let issueBody = "# Automated Security Scan Results\\n\\n";
          
          // Check Bandit results
          try {
            const banditData = JSON.parse(fs.readFileSync('bandit-detailed.json', 'utf8'));
            const highIssues = banditData.results.filter(r => r.issue_severity === 'HIGH');
            if (highIssues.length > 0) {
              criticalIssues = true;
              issueBody += `## ðŸš¨ High Severity Security Issues (${highIssues.length})\\n\\n`;
              highIssues.forEach(issue => {
                issueBody += `- **${issue.test_name}**: ${issue.issue_text}\\n`;
                issueBody += `  - File: ${issue.filename}:${issue.line_number}\\n`;
                issueBody += `  - Confidence: ${issue.issue_confidence}\\n\\n`;
              });
            }
          } catch (e) {
            console.log('No Bandit results found');
          }
          
          // Check Safety results
          try {
            const safetyData = JSON.parse(fs.readFileSync('safety-detailed.json', 'utf8'));
            if (safetyData.vulnerabilities && safetyData.vulnerabilities.length > 0) {
              criticalIssues = true;
              issueBody += `## ðŸ”’ Dependency Vulnerabilities (${safetyData.vulnerabilities.length})\\n\\n`;
              safetyData.vulnerabilities.forEach(vuln => {
                issueBody += `- **${vuln.package_name}** ${vuln.installed_version}\\n`;
                issueBody += `  - Vulnerability: ${vuln.vulnerability_id}\\n`;
                issueBody += `  - Affected: ${vuln.affected_versions}\\n`;
                issueBody += `  - Fix: Upgrade to ${vuln.safe_versions}\\n\\n`;
              });
            }
          } catch (e) {
            console.log('No Safety results found');
          }
          
          if (criticalIssues) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Critical Security Issues Detected - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'critical', 'automated']
            });
          }
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-monitoring-results
        path: |
          bandit-detailed.json
          safety-detailed.json
          semgrep-results.json
          container-security.sarif
          security-summary.md

  # ============================================================================
  # Supply Chain Security Monitoring
  # ============================================================================
  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: .
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Scan SBOM with Grype
      uses: anchore/scan-action@v3
      with:
        sbom: sbom.spdx.json
        output-format: sarif
        output-file: supply-chain-results.sarif
    
    - name: Upload supply chain scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: supply-chain-results.sarif
    
    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v3
      with:
        name: software-bill-of-materials
        path: |
          sbom.spdx.json
          supply-chain-results.sarif

  # ============================================================================
  # Security Metrics & Reporting
  # ============================================================================
  security-metrics:
    name: Security Metrics Dashboard
    runs-on: ubuntu-latest
    needs: [security-monitoring, supply-chain-security]
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download security artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-monitoring-results
        path: security-results/
    
    - name: Generate security metrics
      run: |
        echo "# Security Metrics Dashboard" > security-metrics.md
        echo "Last Updated: $(date)" >> security-metrics.md
        echo "" >> security-metrics.md
        
        # Calculate metrics from scan results
        TOTAL_SCANS=$(find security-results/ -name "*.json" | wc -l)
        echo "## Scan Summary" >> security-metrics.md
        echo "- Total security scans: $TOTAL_SCANS" >> security-metrics.md
        
        # Security trend analysis (simplified)
        echo "" >> security-metrics.md
        echo "## Trend Analysis" >> security-metrics.md
        echo "- Security scan frequency: Daily" >> security-metrics.md
        echo "- Coverage: SAST, Dependency, Container, Supply Chain" >> security-metrics.md
        
        # Generate security score (simplified calculation)
        SECURITY_SCORE=85  # This would be calculated from actual scan results
        echo "" >> security-metrics.md
        echo "## Security Score: ${SECURITY_SCORE}/100" >> security-metrics.md
        
        if [ $SECURITY_SCORE -ge 90 ]; then
          echo "ðŸŸ¢ **EXCELLENT** - Security posture is strong" >> security-metrics.md
        elif [ $SECURITY_SCORE -ge 80 ]; then
          echo "ðŸŸ¡ **GOOD** - Minor improvements recommended" >> security-metrics.md
        elif [ $SECURITY_SCORE -ge 70 ]; then
          echo "ðŸŸ  **FAIR** - Several security improvements needed" >> security-metrics.md
        else
          echo "ðŸ”´ **POOR** - Immediate security attention required" >> security-metrics.md
        fi
    
    - name: Create security metrics issue
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const metricsContent = fs.readFileSync('security-metrics.md', 'utf8');
          
          // Check if a metrics issue already exists for this week
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security-metrics',
            state: 'open'
          });
          
          const thisWeek = new Date().toISOString().split('T')[0].substring(0, 7);
          const existingIssue = issues.find(issue => 
            issue.title.includes(thisWeek)
          );
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: metricsContent
            });
          } else {
            // Create new metrics issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ“Š Security Metrics Dashboard - ${thisWeek}`,
              body: metricsContent,
              labels: ['security-metrics', 'dashboard', 'automated']
            });
          }
    
    - name: Upload metrics
      uses: actions/upload-artifact@v3
      with:
        name: security-metrics-dashboard
        path: security-metrics.md